{"version":3,"file":"math.utils-8c9f5f65.js","sources":["../../../../packages/antwerp-ui/react-components/src/utils/math.utils.ts"],"sourcesContent":["const getRange = (start: number, end: number) => {\n  return Array(end - start + 1)\n    .fill(0)\n    .map((_, i) => i + start);\n};\n\nexport const pagesArray = (current: number, total: number) => {\n  const delta = total <= 7 ? 7 : current > 4 && current < total - 3 ? 2 : 4;\n  let rangeStart = Math.round(current - delta / 2);\n  let rangeEnd = Math.round(current + delta / 2);\n  if (rangeStart - 1 === 1 || rangeEnd + 1 === total) {\n    rangeStart += 1;\n    rangeEnd += 1;\n  }\n  let pages: number[] =\n    current > delta\n      ? getRange(Math.min(rangeStart, total - delta), Math.min(rangeEnd, total))\n      : getRange(1, Math.min(total, delta + 1));\n  if (pages[0] !== 1) {\n    pages = [1, 0].concat(pages);\n  }\n  if (pages[pages.length - 1] < total) {\n    pages = pages.concat([0, total]);\n  }\n  return pages;\n};\n\nexport const lineValuesToPosition = (value: number, min: number, max: number, limit: number) => {\n  const diffMaxMin = max - min;\n  const diffValMin = value - min;\n  const percentage = diffValMin / diffMaxMin;\n  return Math.round(percentage * limit);\n};\n\nconst clamp = (value: number, min: number, max: number) => {\n  return Math.min(Math.max(value, min), max);\n};\n\nexport const getPosition = (coordinate: number, direction?: number) => {\n  return direction ? coordinate - direction : coordinate;\n};\n\nexport const getValueFromPosition = (\n  pos: number,\n  limit: number,\n  step: number,\n  min: number,\n  max: number,\n  sliderMin: number,\n  sliderMax: number\n) => {\n  const percentage = clamp(pos, 0, limit) / (limit || 1);\n\n  const baseVal = (step * Math.round(percentage * (sliderMax - sliderMin))) / step;\n\n  let value = baseVal + sliderMin;\n\n  if (value >= max) value = max;\n  if (value <= min) value = min;\n  return value;\n};\n\nexport const getSteps = (min: number, max: number, step: number): number[] => {\n  const array: number[] = [];\n  if (step <= 0) {\n    return [max];\n  }\n  for (let index = min; index < max; index += step) {\n    array.push(index);\n  }\n  return [...array, max];\n};\n"],"names":["getRange","__name","start","end","_","i","pagesArray","current","total","delta","rangeStart","rangeEnd","pages","lineValuesToPosition","value","min","max","limit","diffMaxMin","percentage","clamp","getPosition","coordinate","direction","getValueFromPosition","pos","step","sliderMin","sliderMax","getSteps","array","index"],"mappings":"+EAAA,MAAMA,EAAWC,EAAA,CAACC,EAAeC,IACxB,MAAMA,EAAMD,EAAQ,CAAC,EACzB,KAAK,CAAC,EACN,IAAI,CAACE,EAAGC,IAAMA,EAAIH,CAAK,EAHX,YAMJI,EAAaL,EAAA,CAACM,EAAiBC,IAAkB,CACtD,MAAAC,EAAQD,GAAS,EAAI,EAAID,EAAU,GAAKA,EAAUC,EAAQ,EAAI,EAAI,EACxE,IAAIE,EAAa,KAAK,MAAMH,EAAUE,EAAQ,CAAC,EAC3CE,EAAW,KAAK,MAAMJ,EAAUE,EAAQ,CAAC,GACzCC,EAAa,IAAM,GAAKC,EAAW,IAAMH,KAC7BE,GAAA,EACFC,GAAA,GAEV,IAAAC,EACFL,EAAUE,EACNT,EAAS,KAAK,IAAIU,EAAYF,EAAQC,CAAK,EAAG,KAAK,IAAIE,EAAUH,CAAK,CAAC,EACvER,EAAS,EAAG,KAAK,IAAIQ,EAAOC,EAAQ,CAAC,CAAC,EACxC,OAAAG,EAAM,KAAO,IACfA,EAAQ,CAAC,EAAG,CAAC,EAAE,OAAOA,CAAK,GAEzBA,EAAMA,EAAM,OAAS,GAAKJ,IAC5BI,EAAQA,EAAM,OAAO,CAAC,EAAGJ,CAAK,CAAC,GAE1BI,CACT,EAnB0B,cAqBbC,EAAuBZ,EAAA,CAACa,EAAeC,EAAaC,EAAaC,IAAkB,CAC9F,MAAMC,EAAaF,EAAMD,EAEnBI,GADaL,EAAQC,GACKG,EACzB,OAAA,KAAK,MAAMC,EAAaF,CAAK,CACtC,EALoC,wBAO9BG,EAAQnB,EAAA,CAACa,EAAeC,EAAaC,IAClC,KAAK,IAAI,KAAK,IAAIF,EAAOC,CAAG,EAAGC,CAAG,EAD7B,SAIDK,EAAcpB,EAAA,CAACqB,EAAoBC,IACvCA,EAAYD,EAAaC,EAAYD,EADnB,eAIdE,EAAuBvB,EAAA,CAClCwB,EACAR,EACAS,EACAX,EACAC,EACAW,EACAC,IACG,CACH,MAAMT,EAAaC,EAAMK,EAAK,EAAGR,CAAK,GAAKA,GAAS,GAIpD,IAAIH,EAFaY,EAAO,KAAK,MAAMP,GAAcS,EAAYD,EAAU,EAAKD,EAEtDC,EAEtB,OAAIb,GAASE,IAAaF,EAAAE,GACtBF,GAASC,IAAaD,EAAAC,GACnBD,CACT,EAlBoC,wBAoBvBe,EAAW5B,EAAA,CAACc,EAAaC,EAAaU,IAA2B,CAC5E,MAAMI,EAAkB,CAAA,EACxB,GAAIJ,GAAQ,EACV,MAAO,CAACV,CAAG,EAEb,QAASe,EAAQhB,EAAKgB,EAAQf,EAAKe,GAASL,EAC1CI,EAAM,KAAKC,CAAK,EAEX,MAAA,CAAC,GAAGD,EAAOd,CAAG,CACvB,EATwB"}